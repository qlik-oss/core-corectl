{
  "name": "corectl",
  "info": {
    "title": "Specification for corectl",
    "description": "corectl contains various commands to interact with the Qlik Associative Engine. See respective command for more information",
    "version": "1.4.2-dev",
    "license": "MIT"
  },
  "clispec": "0.1.0",
  "x-qlik-stability": "stable",
  "flags": {
    "app": {
      "alias": "a",
      "description": "Name or identifier of the app"
    },
    "bash": {
      "description": "Bash flag used to adapt output to bash completion format",
      "default": "false"
    },
    "certificates": {
      "description": "path/to/folder containing client.pem, client_key.pem and root.pem certificates"
    },
    "config": {
      "alias": "c",
      "description": "path/to/config.yml where parameters can be set instead of on the command line"
    },
    "context": {
      "description": "Name of the context used when connecting to Qlik Associative Engine"
    },
    "engine": {
      "alias": "e",
      "description": "URL to the Qlik Associative Engine",
      "default": "localhost:9076"
    },
    "headers": {
      "description": "Http headers to use when connecting to Qlik Associative Engine",
      "default": "[]"
    },
    "insecure": {
      "description": "Enabling insecure will make it possible to connect using self signed certificates",
      "default": "false"
    },
    "json": {
      "description": "Returns output in JSON format if possible, disables verbose and traffic output",
      "default": "false"
    },
    "no-data": {
      "description": "Open app without data",
      "default": "false"
    },
    "traffic": {
      "alias": "t",
      "description": "Log JSON websocket traffic to stdout",
      "default": "false"
    },
    "ttl": {
      "description": "Qlik Associative Engine session time to live in seconds",
      "default": "0"
    },
    "verbose": {
      "alias": "v",
      "description": "Log extra information",
      "default": "false"
    }
  },
  "commands": {
    "app": {
      "description": "Explore and manage apps",
      "commands": {
        "import": {
          "description": "Import the specified app into the engine, returns the ID of the created app",
          "x-qlik-stability": "experimental",
          "flags": {
            "quiet": {
              "alias": "q",
              "description": "Only print IDs. Useful for scripting",
              "default": "false"
            }
          }
        },
        "ls": {
          "description": "Print a list of all apps available in the current engine",
          "flags": {
            "quiet": {
              "alias": "q",
              "description": "Only print IDs. Useful for scripting",
              "default": "false"
            }
          }
        },
        "rm": {
          "description": "Remove the specified app",
          "flags": {
            "suppress": {
              "description": "Suppress confirmation dialogue",
              "default": "false"
            }
          }
        }
      }
    },
    "assoc": {
      "alias": "associations",
      "description": "Print table associations"
    },
    "bookmark": {
      "description": "Explore and manage bookmarks",
      "x-qlik-stability": "experimental",
      "commands": {
        "layout": {
          "description": "Evaluate the layout of an generic bookmark"
        },
        "ls": {
          "description": "Print a list of all generic bookmarks in the current app"
        },
        "properties": {
          "description": "Print the properties of the generic bookmark",
          "flags": {
            "minimum": {
              "description": "Only print properties required by engine",
              "default": "false"
            }
          }
        },
        "rm": {
          "description": "Remove one or many bookmarks in the current app",
          "flags": {
            "no-save": {
              "description": "Do not save the app",
              "default": "false"
            }
          }
        },
        "set": {
          "description": "Set or update the bookmarks in the current app",
          "flags": {
            "no-save": {
              "description": "Do not save the app",
              "default": "false"
            }
          }
        }
      }
    },
    "build": {
      "flags": {
        "bookmarks": {
          "description": "A list of generic bookmark json paths"
        },
        "connections": {
          "description": "Path to a yml file containing the data connection definitions"
        },
        "dimensions": {
          "description": "A list of generic dimension json paths"
        },
        "limit": {
          "description": "Limit the number of rows to load",
          "default": "0"
        },
        "measures": {
          "description": "A list of generic measures json paths"
        },
        "no-reload": {
          "description": "Do not run the reload script",
          "default": "false"
        },
        "no-save": {
          "description": "Do not save the app",
          "default": "false"
        },
        "objects": {
          "description": "A list of generic object json paths"
        },
        "script": {
          "description": "Path to a qvs file containing the app data reload script"
        },
        "silent": {
          "description": "Do not log reload output",
          "default": "false"
        },
        "variables": {
          "description": "A list of generic variable json paths"
        }
      }
    },
    "catwalk": {
      "description": "Open the specified app in catwalk. If no app is specified the catwalk hub will be opened.",
      "flags": {
        "catwalk-url": {
          "description": "Url to an instance of catwalk, if not provided the qlik one will be used",
          "default": "https://catwalk.core.qlik.com"
        }
      }
    },
    "completion": {
      "description": "Generate a shell completion script for the specified shell (bash or zsh). The shell script must be evaluated to provide\ninteractive completion. This can be done by sourcing it in your ~/.bashrc or ~/.zshrc file.\nNote that bash-completion is required and needs to be installed on your system."
    },
    "connection": {
      "description": "Explore and manage connections",
      "commands": {
        "get": {
          "description": "Show the properties for a specific connection"
        },
        "ls": {
          "description": "Print a list of all connections in the current app",
          "flags": {
            "quiet": {
              "alias": "q",
              "description": "Only print IDs. Useful for scripting",
              "default": "false"
            }
          }
        },
        "rm": {
          "description": "Remove one or many connections from the app"
        },
        "set": {
          "description": "Set or update the connections in the current app"
        }
      }
    },
    "context": {
      "description": "Create, update and use contexts\n\nContexts store connection information such as engine url, certificates and headers,\nsimilar to a config. The main difference between contexts and configs is that they\ncan be used globally. Use the context subcommands to configure contexts which\nfacilitate app development in environments where certificates and headers are needed.\n\nThe current context is the one that is being used. You can use \"context get\" to\ndisplay the contents of the current context and switch context with \"context set\"\nor unset the current context with \"context unset\".\n\nNote that contexts have the lowest precedence. This means that e.g. an --engine flag\n(or an engine field in a config) will override the engine url in the current context.\n\nContexts are stored locally in your ~/.corectl/contexts.yml file.",
      "x-qlik-stability": "experimental",
      "commands": {
        "clear": {
          "description": "Set the current context to none"
        },
        "get": {
          "description": "Get context, current context by default"
        },
        "login": {
          "description": "Login and set cookie for the named context\n\t\nThis is only applicable when connecting to 'Qlik Sense Enterprise for Windows' through its proxy using HTTPS.\nIf no 'context-name' is used as argument the 'current-context' defined in the config will be used instead.",
          "flags": {
            "password": {
              "description": "Password to be used when logging in to Qlik Sense Enterprise (use with caution)"
            },
            "user": {
              "description": "Username to be used when logging in to Qlik Sense Enterprise"
            }
          }
        },
        "ls": {
          "description": "List all contexts"
        },
        "rm": {
          "description": "Remove one or more contexts"
        },
        "set": {
          "description": "Set a context to the current configuration\n\nThis command creates or updates a context by using the supplied flags and any\nrelevant config information found in the config file (if any).\nThe information stored will be engine url, headers and certificates (if present)\nalong with comment and the context-name.",
          "flags": {
            "comment": {
              "description": "Comment for the context"
            }
          }
        },
        "use": {
          "description": "Specify what context to use"
        }
      }
    },
    "dimension": {
      "description": "Explore and manage dimensions",
      "commands": {
        "layout": {
          "description": "Evaluate the layout of an generic dimension"
        },
        "ls": {
          "description": "Print a list of all generic dimensions in the current app",
          "flags": {
            "quiet": {
              "alias": "q",
              "description": "Only print IDs. Useful for scripting",
              "default": "false"
            }
          }
        },
        "properties": {
          "description": "Print the properties of the generic dimension",
          "flags": {
            "minimum": {
              "description": "Only print properties required by engine",
              "default": "false"
            }
          }
        },
        "rm": {
          "description": "Remove one or many dimensions in the current app",
          "flags": {
            "no-save": {
              "description": "Do not save the app",
              "default": "false"
            }
          }
        },
        "set": {
          "description": "Set or update the dimensions in the current app",
          "flags": {
            "no-save": {
              "description": "Do not save the app",
              "default": "false"
            }
          }
        }
      }
    },
    "eval": {
      "description": "Evaluate a list of measures and dimensions. To evaluate a measure for a specific dimension use the \u003cmeasure\u003e by \u003cdimension\u003e notation. If dimensions are omitted then the eval will be evaluated over all dimensions."
    },
    "fields": {
      "description": "Print all the fields in an app, and for each field also some sample content, tags and and number of values",
      "flags": {
        "quiet": {
          "alias": "q",
          "description": "Only print IDs. Useful for scripting",
          "default": "false"
        }
      }
    },
    "generate-docs": {
      "description": "Generate markdown docs based on cobra commands"
    },
    "generate-spec": {
      "description": "Generate API spec docs based on cobra commands",
      "flags": {
        "help": {
          "alias": "h",
          "description": "help for generate-spec",
          "default": "false"
        }
      }
    },
    "help": {
      "description": "Help provides help for any command in the application.\nSimply type corectl help [path to command] for full details."
    },
    "keys": {
      "description": "Print a fields list containing key-only fields"
    },
    "measure": {
      "description": "Explore and manage measures",
      "commands": {
        "layout": {
          "description": "Evaluate the layout of an generic measure and prints in JSON format"
        },
        "ls": {
          "description": "Print a list of all generic measures in the current app",
          "flags": {
            "quiet": {
              "alias": "q",
              "description": "Only print IDs. Useful for scripting",
              "default": "false"
            }
          }
        },
        "properties": {
          "description": "Print the properties of the generic measure",
          "flags": {
            "minimum": {
              "description": "Only print properties required by engine",
              "default": "false"
            }
          }
        },
        "rm": {
          "description": "Remove one or many generic measures in the current app",
          "flags": {
            "no-save": {
              "description": "Do not save the app",
              "default": "false"
            }
          }
        },
        "set": {
          "description": "Set or update the measures in the current app",
          "flags": {
            "no-save": {
              "description": "Do not save the app",
              "default": "false"
            }
          }
        }
      }
    },
    "meta": {
      "description": "Print tables, fields, associations along with metadata like memory consumption, field cardinality etc"
    },
    "object": {
      "description": "Explore and manage generic objects",
      "commands": {
        "data": {
          "description": "Evaluate the hypercube data of a generic object"
        },
        "layout": {
          "description": "Evaluate the hypercube layout of the generic object"
        },
        "ls": {
          "description": "Print a list of all generic objects in the current app",
          "flags": {
            "quiet": {
              "alias": "q",
              "description": "Only print IDs. Useful for scripting",
              "default": "false"
            }
          }
        },
        "properties": {
          "description": "Print the properties of the generic object in JSON format",
          "flags": {
            "full": {
              "description": "Using 'GetFullPropertyTree' to retrive properties for children as well",
              "default": "false"
            },
            "minimum": {
              "description": "Only print properties required by engine",
              "default": "false"
            }
          }
        },
        "rm": {
          "description": "Remove one or many generic objects in the current app",
          "flags": {
            "no-save": {
              "description": "Do not save the app",
              "default": "false"
            }
          }
        },
        "set": {
          "description": "Set or update the objects in the current app.\nThe JSON objects can be in either the GenericObjectProperties format or the GenericObjectEntry format",
          "flags": {
            "no-save": {
              "description": "Do not save the app",
              "default": "false"
            }
          }
        }
      }
    },
    "reload": {
      "description": "Reload and save the app",
      "flags": {
        "limit": {
          "description": "Limit the number of rows to load",
          "default": "0"
        },
        "no-save": {
          "description": "Do not save the app",
          "default": "false"
        },
        "silent": {
          "description": "Do not log reload output",
          "default": "false"
        }
      }
    },
    "script": {
      "description": "Explore and manage the script",
      "commands": {
        "get": {
          "description": "Print the reload script currently set in the app"
        },
        "set": {
          "description": "Set the script in the current app",
          "flags": {
            "no-save": {
              "description": "Do not save the app",
              "default": "false"
            }
          }
        }
      }
    },
    "state": {
      "alias": "alternatestate",
      "description": "Explore and manage alternate states",
      "x-qlik-stability": "experimental",
      "commands": {
        "add": {
          "description": "Add an alternate states in the current app"
        },
        "ls": {
          "description": "Print a list of all alternate states in the current app",
          "flags": {
            "quiet": {
              "alias": "q",
              "description": "Only print IDs. Useful for scripting",
              "default": "false"
            }
          }
        },
        "rm": {
          "description": "Removes an alternate state in the current app"
        }
      }
    },
    "status": {
      "description": "Print status info about the connection to the engine and current app, and also the status of the data model"
    },
    "tables": {
      "description": "Print tables for the data model in an app"
    },
    "unbuild": {
      "description": "Extracts generic objects, dimensions, measures, variables, reload script and connections from an app in an engine into separate json and yaml files.\nIn addition to the resources from the app a corectl.yml configuration file is generated that binds them all together.\nPasswords in the connection definitions can not be exported from the app and hence need to be handled manually.\nGeneric Object trees (e.g. Qlik Sense sheets) are exported as a full property tree which means that child objects are found inside the parent´s json (the qChildren array).\n",
      "x-qlik-stability": "experimental",
      "flags": {
        "dir": {
          "description": "Path to a the folder where the unbuilt app is exported",
          "default": "./\u003capp name\u003e-unbuild"
        }
      }
    },
    "values": {
      "description": "Print the top values for a specific field in your data model"
    },
    "variable": {
      "description": "Explore and manage variables",
      "x-qlik-stability": "experimental",
      "commands": {
        "layout": {
          "description": "Evaluate the layout of an generic variable"
        },
        "ls": {
          "description": "Print a list of all generic variables in the current app",
          "flags": {
            "quiet": {
              "alias": "q",
              "description": "Only print IDs. Useful for scripting",
              "default": "false"
            }
          }
        },
        "properties": {
          "description": "Print the properties of the generic variable",
          "flags": {
            "minimum": {
              "description": "Only print properties required by engine",
              "default": "false"
            }
          }
        },
        "rm": {
          "description": "Remove one or many variables in the current app",
          "flags": {
            "no-save": {
              "description": "Do not save the app",
              "default": "false"
            }
          }
        },
        "set": {
          "description": "Set or update the variables in the current app",
          "flags": {
            "no-save": {
              "description": "Do not save the app",
              "default": "false"
            }
          }
        }
      }
    },
    "version": {}
  }
}